name: Multi-Agent Bahnabfrage Workflow

on:
  issues:
    types: [opened, labeled, assigned]
  pull_request:
    types: [opened, synchronize, closed]
  schedule:
    # Health Check alle 6 Stunden (sync mit Service Timer)
    - cron: '0 */6 * * *'

jobs:
  # Analysis Agent Trigger
  analysis-agent-processing:
    if: github.event_name == 'issues' && contains(github.event.issue.labels.*.name, 'needs-analysis')
    runs-on: ubuntu-latest
    steps:
      - name: Trigger Analysis Agent
        run: |
          echo "🔍 Analysis Agent: Processing Issue #${{ github.event.issue.number }}"
          echo "Issue Title: ${{ github.event.issue.title }}"
          echo "Labels: ${{ join(github.event.issue.labels.*.name, ', ') }}"

      - name: Comment on Issue
        uses: peter-evans/create-or-update-comment@v3
        with:
          issue-number: ${{ github.event.issue.number }}
          body: |
            🔍 **Analysis Agent aktiviert**
            
            Dieses Issue wird vom Analysis Agent verarbeitet. Nach der Analyse ist eine Human Review erforderlich.
            
            **Next Steps:**
            1. ⏳ Analysis Agent erstellt detaillierte Analyse
            2. 👤 Human Review der Analyse erforderlich  
            3. ✅ Bei Approval: Issue zu "To Do" verschieben
            4. 🤖 Implementation Agent übernimmt automatisch

  # Implementation Agent Trigger  
  implementation-agent-processing:
    if: github.event_name == 'issues' && contains(github.event.issue.labels.*.name, 'ready-for-implementation')
    runs-on: ubuntu-latest
    steps:
      - name: Trigger Implementation Agent
        run: |
          echo "⚡ Implementation Agent: Starting Implementation #${{ github.event.issue.number }}"
          
      - name: Comment on Issue
        uses: peter-evans/create-or-update-comment@v3
        with:
          issue-number: ${{ github.event.issue.number }}
          body: |
            ⚡ **Implementation Agent gestartet**
            
            Automatische Implementierung wurde gestartet.
            
            **Implementation Steps:**
            - 🔨 Code Implementation mit TDD
            - 🧪 Test Suite Erstellung
            - 📝 PR Creation mit Issue Reference
            - 🚀 Automated Quality Checks

  # Automated Testing für Python Code
  python-quality-checks:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest black flake8 mypy
          
      - name: Code Quality Checks
        run: |
          # Code Formatting Check
          echo "🎨 Checking code formatting..."
          black --check src/ || echo "❌ Code formatting needs improvement"
          
          # Linting
          echo "🔍 Running linting..."
          flake8 src/ --max-line-length=88 --ignore=E203,W503 || echo "❌ Linting issues found"
          
          # Type Checking
          echo "📝 Running type checks..."
          mypy src/ --ignore-missing-imports || echo "❌ Type checking issues found"
          
      - name: Test Configuration Validation
        run: |
          # Test mit Mock Environment
          export TELEGRAM_BOT_TOKEN="test_token"
          export TELEGRAM_CHAT_ID="123456789"
          python src/config.py || echo "❌ Configuration validation failed"
          
      - name: Security Scan
        run: |
          echo "🔒 Running security checks..."
          # Basic dependency check
          python -m pip check || echo "❌ Dependency conflicts found"

  # Service Health Monitoring
  service-health-check:
    if: github.event_name == 'schedule'
    runs-on: ubuntu-latest
    steps:
      - name: Check DB API Health
        run: |
          echo "🚅 Checking Deutsche Bahn API Health..."
          response=$(curl -s -o /dev/null -w "%{http_code}" "https://v6.db.transport.rest/locations?query=Hamburg")
          if [ $response -ne 200 ]; then
            echo "🚨 DB API Health Check Failed: HTTP $response"
            echo "Creating alert issue..."
          else
            echo "✅ DB API Health Check Passed"
          fi
          
      - name: Create Health Report Issue
        if: failure()
        uses: peter-evans/create-issue-from-file@v4
        with:
          title: "🚨 Service Health Alert - $(date)"
          body: |
            # Service Health Alert
            
            **Alert Time:** $(date)
            **Status:** FAILED
            
            ## Checks Performed
            - [ ] Deutsche Bahn API Connectivity
            - [ ] Response Time Check
            
            **Action Required:** Investigation needed
            
            **Labels:** bug, health-check, urgent
          labels: |
            bug
            health-check  
            urgent
            needs-analysis

  # Automated Deployment nach PR Merge
  deploy-to-production:
    if: github.event_name == 'pull_request' && github.event.action == 'closed' && github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:
      - name: Deployment Success Notification
        run: |
          echo "🚀 Deployment completed successfully"
          echo "PR: ${{ github.event.pull_request.title }}"
          echo "Commit: ${{ github.sha }}"
          
      - name: Comment on Merged PR
        uses: peter-evans/create-or-update-comment@v3
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            🚀 **Deployment erfolgreich!**
            
            **Deployment Details:**
            - Commit: ${{ github.sha }}
            - Deploy Time: $(date)
            - Status: ✅ SUCCESS
            
            **Next Steps:**
            - [ ] Service Health Monitoring aktiv
            - [ ] Logs überwachen für 24h
            - [ ] Performance Metrics checken
            
            Die Änderungen sind jetzt live! 🎉